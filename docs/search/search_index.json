{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PASV P rotein A ctive S ite V alidation Post-homology search validation and partitioning of sequences by specific residues (active sites, conserved residues, etc). Citation If you use pasv, please cite the PASV preprint . Thank you!! License Software Copyright (c) 2017 - 2021 Ryan Moore. Licensed under the Apache License, Version 2.0 or the MIT license, at your option. This program may not be copied, modified, or distributed except according to those terms. Documentation Copyright (c) 2021 Ryan Moore. This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"PASV"},{"location":"#pasv","text":"P rotein A ctive S ite V alidation Post-homology search validation and partitioning of sequences by specific residues (active sites, conserved residues, etc).","title":"PASV"},{"location":"#citation","text":"If you use pasv, please cite the PASV preprint . Thank you!!","title":"Citation"},{"location":"#license","text":"","title":"License"},{"location":"#software","text":"Copyright (c) 2017 - 2021 Ryan Moore. Licensed under the Apache License, Version 2.0 or the MIT license, at your option. This program may not be copied, modified, or distributed except according to those terms.","title":"Software"},{"location":"#documentation","text":"Copyright (c) 2021 Ryan Moore. This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Documentation"},{"location":"bibliography/","text":"List of (most of the )references for papers mentioned in the documentation. If there are any mentioned in the docs that are not included here, please let me know, and I will correct it! Ballif, Marie, Paul Harino, Serej Ley, Mireia Coscolla, Stefan Niemann, Robyn Carter, Christopher Coulter, et al. 2012. \u201cDrug Resistance-Conferring Mutations in Mycobacterium Tuberculosis from Madang, Papua New Guinea.\u201d BMC Microbiology 12 (September): 191. De Smet, Koen A. L., Karen E. Kempsell, Alex Gallagher, Ken Duncan, and Douglas B. Young. 1999. \u201cAlteration of a Single Amino Acid Residue Reverses Fosfomycin Resistance of Recombinant MurA from Mycobacterium Tuberculosis The EMBL Accession Number for the Sequence in This Paper Is X96711.\u201d Microbiology 145 (11): 3177\u201384. Nasko, Daniel J., Jessica Chopyk, Eric G. Sakowski, Barbra D. Ferrell, Shawn W. Polson, and K. Eric Wommack. 2018. \u201cFamily A DNA Polymerase Phylogeny Uncovers Diversity and Replication Gene Organization in the Virioplankton.\u201d Frontiers in Microbiology 9 (December): 3053. Schmidt, Helen F., Eric G. Sakowski, Shannon J. Williamson, Shawn W. Polson, and K. Eric Wommack. 2014. \u201cShotgun Metagenomics Indicates Novel Family A DNA Polymerases Predominate within Marine Virioplankton.\u201d The ISME Journal 8 (1): 103\u201314. Tabor, S., and C. C. Richardson. 1995. \u201cA Single Residue in DNA Polymerases of the Escherichia Coli DNA Polymerase I Family Is Critical for Distinguishing between Deoxy- and Dideoxyribonucleotides.\u201d Proceedings of the National Academy of Sciences of the United States of America 92 (14): 6339\u201343. Vilch\u00e8ze, Catherine, Torin R. Weisbrod, Bing Chen, Laurent Kremer, Manzour H. Hazb\u00f3n, Feng Wang, David Alland, James C. Sacchettini, and William R. Jacobs Jr. 2005. \u201cAltered NADH/NAD+ Ratio Mediates Coresistance to Isoniazid and Ethionamide in Mycobacteria.\u201d Antimicrobial Agents and Chemotherapy 49 (2): 708\u201320. Zuurmond, A. M., L. N. Olsthoorn-Tieleman, J. Martien de Graaf, A. Parmeggiani, and B. Kraal. 1999. \u201cMutant EF-Tu Species Reveal Novel Features of the Enacyloxin IIa Inhibition Mechanism on the Ribosome.\u201d Journal of Molecular Biology 294 (3): 627\u201337.","title":"Bibliography"},{"location":"cli/","text":"PASV Command Line Interface The pasv program has multiple commands to help you validate active sites, conserved residues, etc. in multiple sequence alignments. Commands The four pasv commands are: check : Use pre-computed alignments hmm : Use hidden markov model (HMM) alignments msa : Use multiple sequence alignments (MSA) select : Select sequences by their signatures check Use pasv check when you already have an alignment file in which you want to check key residues or a region of interest (ROI). Required arguments pasv check has two required arguments. A multiple sequence alignment in fasta format. The first sequence will be treated as the key reference sequence . All positions will be with respect to this sequence. key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv check --help . hmm Use pasv hmm when you want to use HMM alignments. In this mode, PASV uses the hmmalign program of HMMER to compute sequence alignments. The key reference sequence and all queries are aligned together against the reference HMM. Required arguments pasv hmm has four required arguments: queries : the query sequences references : the reference HMM. This should be the output of HMMER's hmmbuild program key reference sequence : a fasta file with the key reference sequence key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv hmm --help . Reference HMM The references should be an HMM as output by hmmbuild (or at least a program that generates compatible HMMs that can be used with HMMER and hmmalign ). The HMMER user guide has detailed instructions on building HMMs, but the basic incantation for doing it is something like this: $ hmmbuild [-options] <hmmfile_out> <msafile> The HMM file output by this command is used as input to pasv-hmm . msa Use pasv msa when you want to align each query sequence individually with a set of reference sequences. In this mode, PASV uses one of Clustal Omega or MAFFT to align sequences. Required arguments pasv msa has three required arguments: queries : the query sequences references The reference sequences to align with each query The first sequence in the fasta file should be the key reference sequence . key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv msa --help . select Use pasv select to select query sequences based on their key residue signatures. After running one of the alignment subcommands ( check , hmm , or msa ), you can run this command to select query sequences based on their signatures. This is provided for parsing convenience. You can always parse the signatures file yourself with bash or your favorite scripting language. Required arguments pasv select has three required arguments: queries : the query sequences signature file signatures : a comma-separated list of key positions to check The signatures can be provided as fixed strings or regular expressions. For full CLI usage info, run pasv select --help .","title":"Command Line Interface"},{"location":"cli/#pasv-command-line-interface","text":"The pasv program has multiple commands to help you validate active sites, conserved residues, etc. in multiple sequence alignments.","title":"PASV Command Line Interface"},{"location":"cli/#commands","text":"The four pasv commands are: check : Use pre-computed alignments hmm : Use hidden markov model (HMM) alignments msa : Use multiple sequence alignments (MSA) select : Select sequences by their signatures","title":"Commands"},{"location":"cli/#check","text":"Use pasv check when you already have an alignment file in which you want to check key residues or a region of interest (ROI).","title":"check"},{"location":"cli/#required-arguments","text":"pasv check has two required arguments. A multiple sequence alignment in fasta format. The first sequence will be treated as the key reference sequence . All positions will be with respect to this sequence. key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv check --help .","title":"Required arguments"},{"location":"cli/#hmm","text":"Use pasv hmm when you want to use HMM alignments. In this mode, PASV uses the hmmalign program of HMMER to compute sequence alignments. The key reference sequence and all queries are aligned together against the reference HMM.","title":"hmm"},{"location":"cli/#required-arguments_1","text":"pasv hmm has four required arguments: queries : the query sequences references : the reference HMM. This should be the output of HMMER's hmmbuild program key reference sequence : a fasta file with the key reference sequence key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv hmm --help .","title":"Required arguments"},{"location":"cli/#reference-hmm","text":"The references should be an HMM as output by hmmbuild (or at least a program that generates compatible HMMs that can be used with HMMER and hmmalign ). The HMMER user guide has detailed instructions on building HMMs, but the basic incantation for doing it is something like this: $ hmmbuild [-options] <hmmfile_out> <msafile> The HMM file output by this command is used as input to pasv-hmm .","title":"Reference HMM"},{"location":"cli/#msa","text":"Use pasv msa when you want to align each query sequence individually with a set of reference sequences. In this mode, PASV uses one of Clustal Omega or MAFFT to align sequences.","title":"msa"},{"location":"cli/#required-arguments_2","text":"pasv msa has three required arguments: queries : the query sequences references The reference sequences to align with each query The first sequence in the fasta file should be the key reference sequence . key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv msa --help .","title":"Required arguments"},{"location":"cli/#select","text":"Use pasv select to select query sequences based on their key residue signatures. After running one of the alignment subcommands ( check , hmm , or msa ), you can run this command to select query sequences based on their signatures. This is provided for parsing convenience. You can always parse the signatures file yourself with bash or your favorite scripting language.","title":"select"},{"location":"cli/#required-arguments_3","text":"pasv select has three required arguments: queries : the query sequences signature file signatures : a comma-separated list of key positions to check The signatures can be provided as fixed strings or regular expressions. For full CLI usage info, run pasv select --help .","title":"Required arguments"},{"location":"examples-aox-ptox/","text":"Example: AOX/PTOX There is a full example of using pasv v1.3.0 to run the AOX/PTOX example from the manuscript on the pasv v1 GitHub page . The syntax of running pasv is different between versions 1 and 2, but the ideas from that example are the same.","title":"AOX/PTOX Example"},{"location":"examples-aox-ptox/#example-aoxptox","text":"There is a full example of using pasv v1.3.0 to run the AOX/PTOX example from the manuscript on the pasv v1 GitHub page . The syntax of running pasv is different between versions 1 and 2, but the ideas from that example are the same.","title":"Example: AOX/PTOX"},{"location":"examples-pasv-check/","text":"Examples: pasv-check Of the three commands for checking residues, pasv-check is the simplest. It takes two input files: a multiple sequence alignment file in fasta format, and a comma separated list of key residue positions to check. Note: for a lot more examples of using this and other pasv commands, see here . Input files aln.fa A multiple sequence alignment in fasta format. The first sequence in the alignment file is treated as the key reference sequence . Set up environment variables These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_check . $ export ALN=aln.fa $ export OUTDIR=apple Basic usage # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-check. $ pasv check --outdir=\"${OUTDIR}\" \"${ALN}\" 50,52,54 The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that. With region of interest You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-check. $ pasv check \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${ALN}\" \\ 50,52,54 The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both See how there is data about whether queries span the region of interest?","title":"pasv-check"},{"location":"examples-pasv-check/#examples-pasv-check","text":"Of the three commands for checking residues, pasv-check is the simplest. It takes two input files: a multiple sequence alignment file in fasta format, and a comma separated list of key residue positions to check. Note: for a lot more examples of using this and other pasv commands, see here .","title":"Examples: pasv-check"},{"location":"examples-pasv-check/#input-files","text":"","title":"Input files"},{"location":"examples-pasv-check/#alnfa","text":"A multiple sequence alignment in fasta format. The first sequence in the alignment file is treated as the key reference sequence .","title":"aln.fa"},{"location":"examples-pasv-check/#set-up-environment-variables","text":"These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_check . $ export ALN=aln.fa $ export OUTDIR=apple","title":"Set up environment variables"},{"location":"examples-pasv-check/#basic-usage","text":"# Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-check. $ pasv check --outdir=\"${OUTDIR}\" \"${ALN}\" 50,52,54 The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that.","title":"Basic usage"},{"location":"examples-pasv-check/#with-region-of-interest","text":"You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-check. $ pasv check \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${ALN}\" \\ 50,52,54 The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both See how there is data about whether queries span the region of interest?","title":"With region of interest"},{"location":"examples-pasv-hmm/","text":"Examples: pasv-hmm pasv-hmm is one of three pasv commands used to check residues in query sequences with respect to a reference set and a key reference sequence . Note: for a lot more examples of using this and other pasv commands, see here . Required arguments pasv hmm has four required arguments: queries : the query sequences references : the reference HMM. This should be the output of HMMER's hmmbuild program key reference sequence : a fasta file with the key reference sequence key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv hmm --help . Set up environment variables These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_hmm . $ export QUERIES=amk_queries.fa $ export REFS=P00582.refs.aln.hmm $ export MAIN_REF=amk_main_ref.fa $ export OUTDIR=apple $ export RESIDUES=50,52,54 Basic usage # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv hmm --outdir=\"${OUTDIR}\" \"${QUERIES}\" \"${REFS}\" \"${MAIN_REF}\" \"${RESIDUES}\" The output file will be apple/amk_queries.pasv_signatures.tsv . Here are the contents. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that. With region of interest You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv hmm \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${MAIN_REF}\" \\ \"${RESIDUES}\" The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both See how there is data about whether queries span the region of interest?","title":"pasv-hmm"},{"location":"examples-pasv-hmm/#examples-pasv-hmm","text":"pasv-hmm is one of three pasv commands used to check residues in query sequences with respect to a reference set and a key reference sequence . Note: for a lot more examples of using this and other pasv commands, see here .","title":"Examples: pasv-hmm"},{"location":"examples-pasv-hmm/#required-arguments","text":"pasv hmm has four required arguments: queries : the query sequences references : the reference HMM. This should be the output of HMMER's hmmbuild program key reference sequence : a fasta file with the key reference sequence key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv hmm --help .","title":"Required arguments"},{"location":"examples-pasv-hmm/#set-up-environment-variables","text":"These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_hmm . $ export QUERIES=amk_queries.fa $ export REFS=P00582.refs.aln.hmm $ export MAIN_REF=amk_main_ref.fa $ export OUTDIR=apple $ export RESIDUES=50,52,54","title":"Set up environment variables"},{"location":"examples-pasv-hmm/#basic-usage","text":"# Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv hmm --outdir=\"${OUTDIR}\" \"${QUERIES}\" \"${REFS}\" \"${MAIN_REF}\" \"${RESIDUES}\" The output file will be apple/amk_queries.pasv_signatures.tsv . Here are the contents. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that.","title":"Basic usage"},{"location":"examples-pasv-hmm/#with-region-of-interest","text":"You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv hmm \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${MAIN_REF}\" \\ \"${RESIDUES}\" The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both See how there is data about whether queries span the region of interest?","title":"With region of interest"},{"location":"examples-pasv-msa/","text":"Examples: pasv-msa pasv-msa is one of three pasv commands used to check residues in query sequences with respect to a reference set and a key reference sequence . Note: for a lot more examples of using this and other pasv commands, see here . Use pasv msa when you want to align each query sequence individually with a set of reference sequences. In this mode, PASV uses one of Clustal Omega or MAFFT to align sequences. Required arguments pasv msa has three required arguments: queries : the query sequences references The reference sequences to align with each query The first sequence in the fasta file should be the key reference sequence . key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv msa --help . Set up environment variables These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_msa . export QUERIES=amk_queries.fa export REFS=P00582.refs.fa export OUTDIR=apple export RESIDUES=50,52,54 Basic usage # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv msa \\ --jobs=4 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${RESIDUES}\" The output file will be apple/amk_queries.pasv_signatures.tsv . Here are the contents. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that. With region of interest You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv msa \\ --jobs=4 \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${RESIDUES}\" The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both","title":"pasv-msa"},{"location":"examples-pasv-msa/#examples-pasv-msa","text":"pasv-msa is one of three pasv commands used to check residues in query sequences with respect to a reference set and a key reference sequence . Note: for a lot more examples of using this and other pasv commands, see here . Use pasv msa when you want to align each query sequence individually with a set of reference sequences. In this mode, PASV uses one of Clustal Omega or MAFFT to align sequences.","title":"Examples: pasv-msa"},{"location":"examples-pasv-msa/#required-arguments","text":"pasv msa has three required arguments: queries : the query sequences references The reference sequences to align with each query The first sequence in the fasta file should be the key reference sequence . key residues positions : a comma-separated list of key positions to check For full CLI usage info, run pasv msa --help .","title":"Required arguments"},{"location":"examples-pasv-msa/#set-up-environment-variables","text":"These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_msa . export QUERIES=amk_queries.fa export REFS=P00582.refs.fa export OUTDIR=apple export RESIDUES=50,52,54","title":"Set up environment variables"},{"location":"examples-pasv-msa/#basic-usage","text":"# Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv msa \\ --jobs=4 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${RESIDUES}\" The output file will be apple/amk_queries.pasv_signatures.tsv . Here are the contents. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_80_IQK I Q K IQK NA NA NA AMK99662_21_60_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_IQK I Q K IQK NA NA NA AMK99662_40_79_IQK I Q K IQK NA NA NA AMK99662_spans_end_40_81_IQK I Q K IQK NA NA NA AMK99662_spans_both_20_80_IQK I Q K IQK NA NA NA AMK99662_spans_both_19_81_IQK I Q K IQK NA NA NA AMK99662_21_79_IQK I Q K IQK NA NA NA AMK99662_full_length_IQK I Q K IQK NA NA NA AMK99662_real_seq_IQK I Q K IQK NA NA NA AMK99662_full_length_extra_IQK I Q K IQK NA NA NA AMK99662_spans_start_20_60_ABC A B C ABC NA NA NA AMK99662_spans_start_19_60_ABC A B C ABC NA NA NA AMK99662_21_60_ABC A B C ABC NA NA NA AMK99662_spans_end_40_80_ABC A B C ABC NA NA NA AMK99662_spans_end_40_81_ABC A B C ABC NA NA NA AMK99662_40_79_ABC A B C ABC NA NA NA AMK99662_spans_both_20_80_ABC A B C ABC NA NA NA AMK99662_spans_both_19_81_ABC A B C ABC NA NA NA AMK99662_21_79_ABC A B C ABC NA NA NA AMK99662_full_length_ABC A B C ABC NA NA NA AMK99662_real_seq_ABC A B C ABC NA NA NA AMK99662_full_length_extra_ABC A B C ABC NA NA NA For a detailed explanation of this file's format, see here . One thing to note is that there are a lot of NA values present in the output. This is because we didn't provide a region of interest. Let's see how to do that.","title":"Basic usage"},{"location":"examples-pasv-msa/#with-region-of-interest","text":"You can also use pasv to check if query sequences span a region of interest with respect to the key reference sequence. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-hmm. $ pasv msa \\ --jobs=4 \\ --roi-start=20 \\ --roi-end=80 \\ --outdir=\"${OUTDIR}\" \\ \"${QUERIES}\" \\ \"${REFS}\" \\ \"${RESIDUES}\" The output file will be here: \"${OUTDIR}/aln.pasv_signatures.tsv\" . Here are the contents: name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both","title":"With region of interest"},{"location":"examples-pasv-select/","text":"Examples: pasv-select You can select sequences by signature using either fixed strings or regular expressions. I will show you examples using both methods. Note: for a lot more examples of using this and other pasv commands, see here . Input files queries.fa There are 16 queries in the fasta file. Here are the first few sequences. >Seq_01__AAA__Yes__Yes__Both AAA >Seq_02__ABA__Yes__Yes__Both ABA >Seq_03__ACB__Yes__Yes__Both ACB >Seq_04__ADB__Yes__Yes__Both ADB >Seq_05__AAA__Yes__No__Start AAA As you can see, it is just some fake data to illustrate the pasv-select program. signatures.tsv The signatures file is a tab-separated (TSV) file that looks like this: name pos_50 pos_52 pos_54 signature spans_start spans_end spans Seq_01__AAA__Yes__Yes__Both A A A AAA Yes Yes Both Seq_02__ABA__Yes__Yes__Both A B A ABA Yes Yes Both Seq_03__ACB__Yes__Yes__Both A C B ACB Yes Yes Both Seq_04__ADB__Yes__Yes__Both A D B ADB Yes Yes Both Seq_05__AAA__Yes__No__Start A A A AAA Yes No Start Seq_06__ABA__Yes__No__Start A B A ABA Yes No Start Seq_07__ACB__Yes__No__Start A C B ACB Yes No Start Seq_08__ADB__Yes__No__Start A D B ADB Yes No Start Seq_09__AAA__No__Yes__End A A A AAA No Yes End Seq_10__ABA__No__Yes__End A B A ABA No Yes End Seq_11__ACB__No__Yes__End A C B ACB No Yes End Seq_12__ADB__No__Yes__End A D B ADB No Yes End Seq_13__AAA__No__No__Neither A A A AAA No No Neither Seq_14__ABA__No__No__Neither A B A ABA No No Neither Seq_15__ACB__No__No__Neither A C B ACB No No Neither Seq_16__ADB__No__No__Neither A D B ADB No No Neither Set up environment variables These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_select . export QUERY_FILE=queries.fa export SIGNATURE_FILE=signatures.tsv export OUTDIR=apple Note that these are just some silly test files...that's why the fasta \"sequences\" just look like numbers :) Selecting with fixed strings Selecting Select queries with the signature AAA . # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA Rejecting You can also reject queries with certain signatures by using the --reject flag. Here is an example of rejecting queries with the signature AAA . # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --reject \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_ABA.fa === >Seq_02__ABA__Yes__Yes__Both ABA >Seq_06__ABA__Yes__No__Start ABA >Seq_10__ABA__No__Yes__End ABA >Seq_14__ABA__No__No__Neither ABA === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB === apple/signature_ADB.fa === >Seq_04__ADB__Yes__Yes__Both ADB >Seq_08__ADB__Yes__No__Start ADB >Seq_12__ADB__No__Yes__End ADB >Seq_16__ADB__No__No__Neither ADB As you see, there are only sequences that have a different signature than AAA . Multiple patterns You pass multiple patterns at the same time. If a query has any of the listed signatures it will be printed (or rejected if you pass --reject ). To use multiple signatures, just separate them with commas. Selecting # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA,ABA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA === apple/signature_ABA.fa === >Seq_02__ABA__Yes__Yes__Both ABA >Seq_06__ABA__Yes__No__Start ABA >Seq_10__ABA__No__Yes__End ABA >Seq_14__ABA__No__No__Neither ABA Rejecting Rejecting with multiple patterns can be confusing. This example will print sequences that do not have signature AAA or ABA (e.g., ACA , TLA , whatever). # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\"n # Run pasv-select. $ pasv select \\ --reject \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA,ABA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB === apple/signature_ADB.fa === >Seq_04__ADB__Yes__Yes__Both ADB >Seq_08__ADB__Yes__No__Start ADB >Seq_12__ADB__No__Yes__End ADB >Seq_16__ADB__No__No__Neither ADB Selecting with regular expressions You can also use regular expressions to select signatures. In this file, the sequences only have the following signatures: AAA , ABA , ACB , ADB . So with this regular expression, [AC].$ , I can select any signature with A or C in the 2nd position from the end. One thing to note, you generally should put the regular expression inside single quotes. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ '[AC].$' # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB Note that you can use the --reject flag and with regular expressions, as well as passing in a comma separated list of regular expressions. Just watch out though, it can get a little wonky if you go crazy with the regular expression matching and then try and reject it.","title":"pasv-select"},{"location":"examples-pasv-select/#examples-pasv-select","text":"You can select sequences by signature using either fixed strings or regular expressions. I will show you examples using both methods. Note: for a lot more examples of using this and other pasv commands, see here .","title":"Examples: pasv-select"},{"location":"examples-pasv-select/#input-files","text":"","title":"Input files"},{"location":"examples-pasv-select/#queriesfa","text":"There are 16 queries in the fasta file. Here are the first few sequences. >Seq_01__AAA__Yes__Yes__Both AAA >Seq_02__ABA__Yes__Yes__Both ABA >Seq_03__ACB__Yes__Yes__Both ACB >Seq_04__ADB__Yes__Yes__Both ADB >Seq_05__AAA__Yes__No__Start AAA As you can see, it is just some fake data to illustrate the pasv-select program.","title":"queries.fa"},{"location":"examples-pasv-select/#signaturestsv","text":"The signatures file is a tab-separated (TSV) file that looks like this: name pos_50 pos_52 pos_54 signature spans_start spans_end spans Seq_01__AAA__Yes__Yes__Both A A A AAA Yes Yes Both Seq_02__ABA__Yes__Yes__Both A B A ABA Yes Yes Both Seq_03__ACB__Yes__Yes__Both A C B ACB Yes Yes Both Seq_04__ADB__Yes__Yes__Both A D B ADB Yes Yes Both Seq_05__AAA__Yes__No__Start A A A AAA Yes No Start Seq_06__ABA__Yes__No__Start A B A ABA Yes No Start Seq_07__ACB__Yes__No__Start A C B ACB Yes No Start Seq_08__ADB__Yes__No__Start A D B ADB Yes No Start Seq_09__AAA__No__Yes__End A A A AAA No Yes End Seq_10__ABA__No__Yes__End A B A ABA No Yes End Seq_11__ACB__No__Yes__End A C B ACB No Yes End Seq_12__ADB__No__Yes__End A D B ADB No Yes End Seq_13__AAA__No__No__Neither A A A AAA No No Neither Seq_14__ABA__No__No__Neither A B A ABA No No Neither Seq_15__ACB__No__No__Neither A C B ACB No No Neither Seq_16__ADB__No__No__Neither A D B ADB No No Neither","title":"signatures.tsv"},{"location":"examples-pasv-select/#set-up-environment-variables","text":"These are some environment variables that we will use in the example scripts. I am assuming you are running this from the following directory with respect to the pasv source directory: ./_examples/pasv_select . export QUERY_FILE=queries.fa export SIGNATURE_FILE=signatures.tsv export OUTDIR=apple Note that these are just some silly test files...that's why the fasta \"sequences\" just look like numbers :)","title":"Set up environment variables"},{"location":"examples-pasv-select/#selecting-with-fixed-strings","text":"","title":"Selecting with fixed strings"},{"location":"examples-pasv-select/#selecting","text":"Select queries with the signature AAA . # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA","title":"Selecting"},{"location":"examples-pasv-select/#rejecting","text":"You can also reject queries with certain signatures by using the --reject flag. Here is an example of rejecting queries with the signature AAA . # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --reject \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_ABA.fa === >Seq_02__ABA__Yes__Yes__Both ABA >Seq_06__ABA__Yes__No__Start ABA >Seq_10__ABA__No__Yes__End ABA >Seq_14__ABA__No__No__Neither ABA === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB === apple/signature_ADB.fa === >Seq_04__ADB__Yes__Yes__Both ADB >Seq_08__ADB__Yes__No__Start ADB >Seq_12__ADB__No__Yes__End ADB >Seq_16__ADB__No__No__Neither ADB As you see, there are only sequences that have a different signature than AAA .","title":"Rejecting"},{"location":"examples-pasv-select/#multiple-patterns","text":"You pass multiple patterns at the same time. If a query has any of the listed signatures it will be printed (or rejected if you pass --reject ). To use multiple signatures, just separate them with commas.","title":"Multiple patterns"},{"location":"examples-pasv-select/#selecting_1","text":"# Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA,ABA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA === apple/signature_ABA.fa === >Seq_02__ABA__Yes__Yes__Both ABA >Seq_06__ABA__Yes__No__Start ABA >Seq_10__ABA__No__Yes__End ABA >Seq_14__ABA__No__No__Neither ABA","title":"Selecting"},{"location":"examples-pasv-select/#rejecting_1","text":"Rejecting with multiple patterns can be confusing. This example will print sequences that do not have signature AAA or ABA (e.g., ACA , TLA , whatever). # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\"n # Run pasv-select. $ pasv select \\ --reject \\ --fixed-strings \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ AAA,ABA # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB === apple/signature_ADB.fa === >Seq_04__ADB__Yes__Yes__Both ADB >Seq_08__ADB__Yes__No__Start ADB >Seq_12__ADB__No__Yes__End ADB >Seq_16__ADB__No__No__Neither ADB","title":"Rejecting"},{"location":"examples-pasv-select/#selecting-with-regular-expressions","text":"You can also use regular expressions to select signatures. In this file, the sequences only have the following signatures: AAA , ABA , ACB , ADB . So with this regular expression, [AC].$ , I can select any signature with A or C in the 2nd position from the end. One thing to note, you generally should put the regular expression inside single quotes. # Clean up outdir if it exists. $ [ -d \"${OUTDIR}\" ] && rm -r \"${OUTDIR}\" # Run pasv-select. $ pasv select \\ --outdir=\"${OUTDIR}\" \\ \"${QUERY_FILE}\" \\ \"${SIGNATURE_FILE}\" \\ '[AC].$' # Print out the resulting fasta files. $ for f in $(ls \"${OUTDIR}\"/*); do echo \"=== $f ===\"; cat $f; done === apple/signature_AAA.fa === >Seq_01__AAA__Yes__Yes__Both AAA >Seq_05__AAA__Yes__No__Start AAA >Seq_09__AAA__No__Yes__End AAA >Seq_13__AAA__No__No__Neither AAA === apple/signature_ACB.fa === >Seq_03__ACB__Yes__Yes__Both ACB >Seq_07__ACB__Yes__No__Start ACB >Seq_11__ACB__No__Yes__End ACB >Seq_15__ACB__No__No__Neither ACB Note that you can use the --reject flag and with regular expressions, as well as passing in a comma separated list of regular expressions. Just watch out though, it can get a little wonky if you go crazy with the regular expression matching and then try and reject it.","title":"Selecting with regular expressions"},{"location":"getting-started/","text":"Getting started Learning how to use a new command line program can be a real challenge!! I wrote this roadmap to try and give you a little guidance on how to get started using PASV. There are a lot of pages in the wiki, but if you follow along in this order, I think you will be able to get a good feel for the program! Version 1 vs. Version 2 If you're looking for the source code or documentation for pasv version 1 (e.g., to follow along with the PASV manuscript , see the GitHub archive and the old wiki . Version 2 is easier to install and lets you use different methods for checking residues (multiple sequence alignment, hidden Markov models, and raw checking of alignment files). Installation The easiest way to start using PASV is probably by using one of the Docker images . It comes with everything you need to run PASV, including all external dependencies. If you are a Windows user, this is currently your only way to use PASV. Installing PASV is also easy if you use one of the precompiled binaries . This is actually the easier option if you already have one of Clustal Omega , MAAFT , or HMMER installed. Alternatively, if you are an OCaml programmer or want to run the test suite locally, you can install PASV from source . PASV CLI An overview of the PASV CLI is available as well as examples for using PASV. PASV Details Once you've gone through the above introductory material, you will probably want to check out a few more pages. Check out the following pages to learn about picking good references and key residues . We spent a lot of time working out best practices for these things in the manuscript, so I encourage you to check it out! Finally, if you're stuck and need help, open an issue and I will try and clear up any difficulties you're having!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Learning how to use a new command line program can be a real challenge!! I wrote this roadmap to try and give you a little guidance on how to get started using PASV. There are a lot of pages in the wiki, but if you follow along in this order, I think you will be able to get a good feel for the program!","title":"Getting started"},{"location":"getting-started/#version-1-vs-version-2","text":"If you're looking for the source code or documentation for pasv version 1 (e.g., to follow along with the PASV manuscript , see the GitHub archive and the old wiki . Version 2 is easier to install and lets you use different methods for checking residues (multiple sequence alignment, hidden Markov models, and raw checking of alignment files).","title":"Version 1 vs. Version 2"},{"location":"getting-started/#installation","text":"The easiest way to start using PASV is probably by using one of the Docker images . It comes with everything you need to run PASV, including all external dependencies. If you are a Windows user, this is currently your only way to use PASV. Installing PASV is also easy if you use one of the precompiled binaries . This is actually the easier option if you already have one of Clustal Omega , MAAFT , or HMMER installed. Alternatively, if you are an OCaml programmer or want to run the test suite locally, you can install PASV from source .","title":"Installation"},{"location":"getting-started/#pasv-cli","text":"An overview of the PASV CLI is available as well as examples for using PASV.","title":"PASV CLI"},{"location":"getting-started/#pasv-details","text":"Once you've gone through the above introductory material, you will probably want to check out a few more pages. Check out the following pages to learn about picking good references and key residues . We spent a lot of time working out best practices for these things in the manuscript, so I encourage you to check it out! Finally, if you're stuck and need help, open an issue and I will try and clear up any difficulties you're having!","title":"PASV Details"},{"location":"installing-external-dependencies/","text":"Installing External Dependencies PASV relies on a few other software packages to align sequences. Currently, PASV supports Clustal Omega , MAAFT , or HMMER . For detailed instructions on installing these packages, please consult their respective installation pages. Example installation instructions Here are some basic instructions for installing the required software on the latest versions of MacOS and Ubuntu Linux. Note: These instructions are taken from one of the GitHub actions that builds and tests PASV , so if it is passing then these instructions should still work if you have a similar OS. Clustal Omega (Linux) mkdir -p $HOME/.local/bin CLUSTALO_EXE=$HOME/.local/bin/clustalo \\curl -L http://www.clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64 > \"$CLUSTALO_EXE\" chmod 755 \"$CLUSTALO_EXE\" Clustal Omega (Mac) Note that Clustal Omega 1.2.4 is not available on MacOS. mkdir -p $HOME/.local/bin CLUSTALO_EXE=$HOME/.local/bin/clustalo \\curl -L http://www.clustal.org/omega/clustal-omega-1.2.3-macosx > \"$CLUSTALO_EXE\" chmod 755 \"$CLUSTALO_EXE\" MAFFT \\curl -L https://mafft.cbrc.jp/alignment/software/mafft-7.481-without-extensions-src.tgz \\ | tar xz cd mafft-*/core/ && make clean && make && sudo make install HMMER \\curl -L http://eddylab.org/software/hmmer/hmmer-3.3.2.tar.gz | tar xz cd hmmer-3.3.2 && ./configure && make && sudo make install","title":"Installing External Software Dependencies"},{"location":"installing-external-dependencies/#installing-external-dependencies","text":"PASV relies on a few other software packages to align sequences. Currently, PASV supports Clustal Omega , MAAFT , or HMMER . For detailed instructions on installing these packages, please consult their respective installation pages.","title":"Installing External Dependencies"},{"location":"installing-external-dependencies/#example-installation-instructions","text":"Here are some basic instructions for installing the required software on the latest versions of MacOS and Ubuntu Linux. Note: These instructions are taken from one of the GitHub actions that builds and tests PASV , so if it is passing then these instructions should still work if you have a similar OS.","title":"Example installation instructions"},{"location":"installing-external-dependencies/#clustal-omega-linux","text":"mkdir -p $HOME/.local/bin CLUSTALO_EXE=$HOME/.local/bin/clustalo \\curl -L http://www.clustal.org/omega/clustalo-1.2.4-Ubuntu-x86_64 > \"$CLUSTALO_EXE\" chmod 755 \"$CLUSTALO_EXE\"","title":"Clustal Omega (Linux)"},{"location":"installing-external-dependencies/#clustal-omega-mac","text":"Note that Clustal Omega 1.2.4 is not available on MacOS. mkdir -p $HOME/.local/bin CLUSTALO_EXE=$HOME/.local/bin/clustalo \\curl -L http://www.clustal.org/omega/clustal-omega-1.2.3-macosx > \"$CLUSTALO_EXE\" chmod 755 \"$CLUSTALO_EXE\"","title":"Clustal Omega (Mac)"},{"location":"installing-external-dependencies/#mafft","text":"\\curl -L https://mafft.cbrc.jp/alignment/software/mafft-7.481-without-extensions-src.tgz \\ | tar xz cd mafft-*/core/ && make clean && make && sudo make install","title":"MAFFT"},{"location":"installing-external-dependencies/#hmmer","text":"\\curl -L http://eddylab.org/software/hmmer/hmmer-3.3.2.tar.gz | tar xz cd hmmer-3.3.2 && ./configure && make && sudo make install","title":"HMMER"},{"location":"installing-from-source/","text":"Installing PASV from source files If you are not already an OCaml programmer, I recommend that you download one of the precompiled binaries or use the Docker image instead. If you want to compile PASV from source, you need to have a working OCaml development setup. Additionally, you will need to install GNU Make and the external dependencies that PASV relies on. Set up OCaml development environment Instructions to set up an OCaml development environment can be found here or here . Get the code Use git to clone the git repository. $ git clone https://github.com/mooreryan/pasv.git or download a release from here . Install OCaml dependencies cd pasv opam install . --deps-only --with-doc --with-test Build, install, & run tests opam exec -- make build && opam exec -- make install && opam exec -- make test Sanity check If all went well, this should give you the path to the pasv executable file. which pasv","title":"Installing From Source"},{"location":"installing-from-source/#installing-pasv-from-source-files","text":"If you are not already an OCaml programmer, I recommend that you download one of the precompiled binaries or use the Docker image instead. If you want to compile PASV from source, you need to have a working OCaml development setup. Additionally, you will need to install GNU Make and the external dependencies that PASV relies on.","title":"Installing PASV from source files"},{"location":"installing-from-source/#set-up-ocaml-development-environment","text":"Instructions to set up an OCaml development environment can be found here or here .","title":"Set up OCaml development environment"},{"location":"installing-from-source/#get-the-code","text":"Use git to clone the git repository. $ git clone https://github.com/mooreryan/pasv.git or download a release from here .","title":"Get the code"},{"location":"installing-from-source/#install-ocaml-dependencies","text":"cd pasv opam install . --deps-only --with-doc --with-test","title":"Install OCaml dependencies"},{"location":"installing-from-source/#build-install-run-tests","text":"opam exec -- make build && opam exec -- make install && opam exec -- make test","title":"Build, install, &amp; run tests"},{"location":"installing-from-source/#sanity-check","text":"If all went well, this should give you the path to the pasv executable file. which pasv","title":"Sanity check"},{"location":"installing-precompiled-binaries/","text":"Installing Precompiled Binaries The simplest way to get started with PASV is to use one of the precompiled binaries available on the releases page. A couple different \"flavors\" are available: MacOS -- use this if you have a Mac. I have not tested it on the new Arm chip macs, only intel. Linux (Ubuntu, dynamic linking) This should work on Ubuntu-like systems (e.g., Debian and possible others). It does have some dynamically linked C/C++ libraries, so it may not work if you have an older system. See the release page for more info. Linux (Alpine, static linking) This should work on most Linux systems. It is statically linked, so it should Just Work :) If you are on Linux, this is the one you probably want. You can find them all on the releases page. Additionally, you will need to install the external dependencies that PASV relies on.","title":"Installing Precompiled Binaries"},{"location":"installing-precompiled-binaries/#installing-precompiled-binaries","text":"The simplest way to get started with PASV is to use one of the precompiled binaries available on the releases page. A couple different \"flavors\" are available: MacOS -- use this if you have a Mac. I have not tested it on the new Arm chip macs, only intel. Linux (Ubuntu, dynamic linking) This should work on Ubuntu-like systems (e.g., Debian and possible others). It does have some dynamically linked C/C++ libraries, so it may not work if you have an older system. See the release page for more info. Linux (Alpine, static linking) This should work on most Linux systems. It is statically linked, so it should Just Work :) If you are on Linux, this is the one you probably want. You can find them all on the releases page. Additionally, you will need to install the external dependencies that PASV relies on.","title":"Installing Precompiled Binaries"},{"location":"installing-with-docker/","text":"Installing & Using PASV with Docker Note: If you're using Windows, I think this is your only option. WSL may work, but I don't have a way to support it right now. Note: If you use Docker, you won't have to install the external dependencies that PASV relies on. (Other than Docker of course!) An easy way to get started with PASV is by using the Docker image we have created. Install Docker First, you will need to install Docker on your computer. Run pasv in Docker Now you can run pasv inside of the Docker container. You can run Docker directly, or use one of the helper scripts that I made. Using Docker directly You can get the main help screen like this. $ docker run \\ --rm \\ -v $(pwd):$(pwd) \\ -w $(pwd) \\ --user $(id -u):$(id -g) \\ ghcr.io/mooreryan/pasv:VERSION \\ --help Note: just replace VERSION above with the actual Docker image version, e.g., 2.0.2-7d7713a. Using helper scripts That's a lot to remember to type, so I recommend using one of the helper scripts . To \"install\" the scripts, just download them and put them somewhere on your PATH . Here's how you get the main help screen. It does the same thing as above. $ pasv_docker --help When you use the script, you can just replace pasv with pasv_docker and you should be good. Docker gotchas There are some things to watch out for with Docker. Note that if you use the helper scripts rather than running the Docker CLI manually, these will be taken care of for you. Sometimes you need to provide the full path to a file. You need to make sure to mount a volume so the Docker container can read and write files on your hard disk. You probably want to set the working directory of the container to your current working directory (unless you want to specify absolute paths to everything). You probably want to explicitly set the user and group IDs. If you don't everything Docker creates will be owned by a different user. (At least that's how it works on Linux.) sudo On Linux, you need to run Docker with sudo . $ sudo pasv_docker ... If you do that, the output directories and files will be owned by root . To get around this, you should use the sudo_pasv_docker script. It uses sudo from inside the script in such a way that the output files and directories will be owned by the current user and group rather than the root user and group. Note: I'm not sure if the same issues exist on MacOS or Windows :/","title":"Installing With Docker"},{"location":"installing-with-docker/#installing-using-pasv-with-docker","text":"Note: If you're using Windows, I think this is your only option. WSL may work, but I don't have a way to support it right now. Note: If you use Docker, you won't have to install the external dependencies that PASV relies on. (Other than Docker of course!) An easy way to get started with PASV is by using the Docker image we have created.","title":"Installing &amp; Using PASV with Docker"},{"location":"installing-with-docker/#install-docker","text":"First, you will need to install Docker on your computer.","title":"Install Docker"},{"location":"installing-with-docker/#run-pasv-in-docker","text":"Now you can run pasv inside of the Docker container. You can run Docker directly, or use one of the helper scripts that I made.","title":"Run pasv in Docker"},{"location":"installing-with-docker/#using-docker-directly","text":"You can get the main help screen like this. $ docker run \\ --rm \\ -v $(pwd):$(pwd) \\ -w $(pwd) \\ --user $(id -u):$(id -g) \\ ghcr.io/mooreryan/pasv:VERSION \\ --help Note: just replace VERSION above with the actual Docker image version, e.g., 2.0.2-7d7713a.","title":"Using Docker directly"},{"location":"installing-with-docker/#using-helper-scripts","text":"That's a lot to remember to type, so I recommend using one of the helper scripts . To \"install\" the scripts, just download them and put them somewhere on your PATH . Here's how you get the main help screen. It does the same thing as above. $ pasv_docker --help When you use the script, you can just replace pasv with pasv_docker and you should be good.","title":"Using helper scripts"},{"location":"installing-with-docker/#docker-gotchas","text":"There are some things to watch out for with Docker. Note that if you use the helper scripts rather than running the Docker CLI manually, these will be taken care of for you. Sometimes you need to provide the full path to a file. You need to make sure to mount a volume so the Docker container can read and write files on your hard disk. You probably want to set the working directory of the container to your current working directory (unless you want to specify absolute paths to everything). You probably want to explicitly set the user and group IDs. If you don't everything Docker creates will be owned by a different user. (At least that's how it works on Linux.)","title":"Docker gotchas"},{"location":"installing-with-docker/#sudo","text":"On Linux, you need to run Docker with sudo . $ sudo pasv_docker ... If you do that, the output directories and files will be owned by root . To get around this, you should use the sudo_pasv_docker script. It uses sudo from inside the script in such a way that the output files and directories will be owned by the current user and group rather than the root user and group. Note: I'm not sure if the same issues exist on MacOS or Windows :/","title":"sudo"},{"location":"jargon/","text":"Jargon Let's talk about some of the \"jargon\" we use when talking about PASV. MSA: multiple sequence alignment I will use this when talking about alignment as done by Clustal Omega and MAFFT. This is in contrast to using HMMs to align sequences. HMM: hiddon markov model pasv can also use HMMs to align query sequences PASV vs pasv When you see pasv written in that font, I am talking about the PASV command line application. PASV in all caps is the acronym for protein active site validation. It's both talking about the whole pasv program pipeline as well as the general idea of validating aspects of your query sequences. Queries & query sequences These are the sequences you are interested in. Often these will be metagenomic sequences, or sequences output from homology search. pasv will assign a signature to each query sequence based on the residues it has at the specified key positions . References & reference sequences These are the sequences you are using as \"references\". Depending on the command you're running, they could be sequences to align with queries in a multiple sequence alignment, or a profile HMM used to align queries against. Key reference sequences, positions & residues The pasv program will check residues in a particular column of an alignment. To tell pasv which alignment columns to check, you specify \"key\" residues with respect to a reference sequence. I call this reference, the \"key reference sequence\". It doesn't have to be anything special...it is simply the sequence with which the number will be with respect to. The key positions are the positions you care about. They are numbered with respect to the key reference sequence. For example, if you care about an active site at residue 200 in a protein from E. coli , then you would make that E. coli peptide your key reference sequence, and residue 200 would be your key position. Then, pasv will check the residues of the query sequences that align with residue 200 with respect to the key reference sequence. Each pasv command deals with key references and positions a bit differently. For specific info, see the command documentation. Signatures & signature files Each query sequence is assigned a \"signature\" based on the residues that query has at the given key residue positions. A signature file lists these signatures and, optionally, whether a sequence spans a given region of interest (ROI). The signature file is a TSV. Here is an example. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both This run checked for a region of interest as well as the key positions 50, 52, and 54. spans_start : can be one of Yes , No , or NA . spans_end : can be one of Yes , No , or NA . spans : will be one of Neither , Start , End , or Both based on the values in spans_start and spans_end Region of interest The pasv program can optionally check that query sequences span a given region of interest. You provide the start and end positions with respect to the key reference, and the program will check whether each query spans the start, spans the end, or spans both start and end.","title":"Definitions & Jargon"},{"location":"jargon/#jargon","text":"Let's talk about some of the \"jargon\" we use when talking about PASV.","title":"Jargon"},{"location":"jargon/#msa-multiple-sequence-alignment","text":"I will use this when talking about alignment as done by Clustal Omega and MAFFT. This is in contrast to using HMMs to align sequences.","title":"MSA: multiple sequence alignment"},{"location":"jargon/#hmm-hiddon-markov-model","text":"pasv can also use HMMs to align query sequences","title":"HMM: hiddon markov model"},{"location":"jargon/#pasv-vs-pasv","text":"When you see pasv written in that font, I am talking about the PASV command line application. PASV in all caps is the acronym for protein active site validation. It's both talking about the whole pasv program pipeline as well as the general idea of validating aspects of your query sequences.","title":"PASV vs pasv"},{"location":"jargon/#queries-query-sequences","text":"These are the sequences you are interested in. Often these will be metagenomic sequences, or sequences output from homology search. pasv will assign a signature to each query sequence based on the residues it has at the specified key positions .","title":"Queries &amp; query sequences"},{"location":"jargon/#references-reference-sequences","text":"These are the sequences you are using as \"references\". Depending on the command you're running, they could be sequences to align with queries in a multiple sequence alignment, or a profile HMM used to align queries against.","title":"References &amp; reference sequences"},{"location":"jargon/#key-reference-sequences-positions-residues","text":"The pasv program will check residues in a particular column of an alignment. To tell pasv which alignment columns to check, you specify \"key\" residues with respect to a reference sequence. I call this reference, the \"key reference sequence\". It doesn't have to be anything special...it is simply the sequence with which the number will be with respect to. The key positions are the positions you care about. They are numbered with respect to the key reference sequence. For example, if you care about an active site at residue 200 in a protein from E. coli , then you would make that E. coli peptide your key reference sequence, and residue 200 would be your key position. Then, pasv will check the residues of the query sequences that align with residue 200 with respect to the key reference sequence. Each pasv command deals with key references and positions a bit differently. For specific info, see the command documentation.","title":"Key reference sequences, positions &amp; residues"},{"location":"jargon/#signatures-signature-files","text":"Each query sequence is assigned a \"signature\" based on the residues that query has at the given key residue positions. A signature file lists these signatures and, optionally, whether a sequence spans a given region of interest (ROI). The signature file is a TSV. Here is an example. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both This run checked for a region of interest as well as the key positions 50, 52, and 54. spans_start : can be one of Yes , No , or NA . spans_end : can be one of Yes , No , or NA . spans : will be one of Neither , Start , End , or Both based on the values in spans_start and spans_end","title":"Signatures &amp; signature files"},{"location":"jargon/#region-of-interest","text":"The pasv program can optionally check that query sequences span a given region of interest. You provide the start and end positions with respect to the key reference, and the program will check whether each query spans the start, spans the end, or spans both start and end.","title":"Region of interest"},{"location":"pasv-output/","text":"PASV Output pasv programs output a tab-separated text file (TSV) that lists key residues , signatures , and region of interest spanning info for each query sequence. Here is how that file might look. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both Columns name The ID of the sequence. I.e., the part of the fasta header up until the first space. pos_50 This is the first key residue position . It is the residue in the query that aligns with the residue in position 50 of the reference sequence. pos_52 The 2nd key residue position pos_54 The 3rd and final key residue position signature A concatenation of the residues at each of the key residue positions for each query sequence spans_start Does the query sequence span the start of a specified region of interest with numbering according to the key reference sequence? Yes or No spans_end Does the query sequence span then end of a specified region of interest? Yes or No spans Will be one of Neither , Start , End , or Both Based on the values in spans_start and spans_end","title":"PASV Output"},{"location":"pasv-output/#pasv-output","text":"pasv programs output a tab-separated text file (TSV) that lists key residues , signatures , and region of interest spanning info for each query sequence. Here is how that file might look. name pos_50 pos_52 pos_54 signature spans_start spans_end spans AMK99662_spans_start_19_60_IQK I Q K IQK Yes No Start AMK99662_spans_end_40_80_IQK I Q K IQK No Yes End AMK99662_spans_start_20_60_IQK I Q K IQK Yes No Start AMK99662_21_60_IQK I Q K IQK No No Neither AMK99662_40_79_IQK I Q K IQK No No Neither AMK99662_spans_end_40_81_IQK I Q K IQK No Yes End AMK99662_spans_both_20_80_IQK I Q K IQK Yes Yes Both AMK99662_spans_both_19_81_IQK I Q K IQK Yes Yes Both AMK99662_21_79_IQK I Q K IQK No No Neither AMK99662_full_length_IQK I Q K IQK Yes Yes Both AMK99662_real_seq_IQK I Q K IQK Yes Yes Both AMK99662_full_length_extra_IQK I Q K IQK Yes Yes Both AMK99662_spans_start_20_60_ABC A B C ABC Yes No Start AMK99662_spans_start_19_60_ABC A B C ABC Yes No Start AMK99662_21_60_ABC A B C ABC No No Neither AMK99662_spans_end_40_80_ABC A B C ABC No Yes End AMK99662_spans_end_40_81_ABC A B C ABC No Yes End AMK99662_40_79_ABC A B C ABC No No Neither AMK99662_spans_both_20_80_ABC A B C ABC Yes Yes Both AMK99662_spans_both_19_81_ABC A B C ABC Yes Yes Both AMK99662_21_79_ABC A B C ABC No No Neither AMK99662_full_length_ABC A B C ABC Yes Yes Both AMK99662_real_seq_ABC A B C ABC Yes Yes Both AMK99662_full_length_extra_ABC A B C ABC Yes Yes Both","title":"PASV Output"},{"location":"pasv-output/#columns","text":"name The ID of the sequence. I.e., the part of the fasta header up until the first space. pos_50 This is the first key residue position . It is the residue in the query that aligns with the residue in position 50 of the reference sequence. pos_52 The 2nd key residue position pos_54 The 3rd and final key residue position signature A concatenation of the residues at each of the key residue positions for each query sequence spans_start Does the query sequence span the start of a specified region of interest with numbering according to the key reference sequence? Yes or No spans_end Does the query sequence span then end of a specified region of interest? Yes or No spans Will be one of Neither , Start , End , or Both Based on the values in spans_start and spans_end","title":"Columns"},{"location":"pasv-use-cases/","text":"PASV Use Cases In the manuscipt , we used PASV for a couple of different test cases. Eliminating bycatch after sensitive homology search We used PASV to removing likely non-functional ribonucleotide-reductase (RNR) sequences based on acitve sites critical to proper RNR function. Of ~10,000 putative RNR sequences obtained via homology search, PASV (and manual curation) flagged ca. 2/3 of the sequences as bycatch based on key residues and aligments to a set of Class I alpha subunit and Class II RNR sequences. Common gene families within the bycatch sequences included RNR Class I beta subunits, thioredoxins, polymerases, helicases, and terminases. >99% concordance with manual annotation Partitioning peptide sequences based on key residues Partitioning RNR Class I alpha and RNR Class II sequences Using key residues to accurately partition RNR Class I alpha sequences from RNR Class II sequences >98% concordance with manual annotation Using amino acid signatures to differentiate Alternative oxidase (AOX) and plastid terminal oxidase (PTOX) Two proteins that are challenging to differentiate by homology search alone 100% concordance with manual annotation Other potential use cases We didn't validate these in the manuscript, but our lab has used PASV to filter and partition DNA polymerase I (Pol I) peptides based on the residues at position 762 ( E. coli numbering). This position has been linked to changes in either the fidelity or efficiency of replication ( Tabor & Richardson 1995 ), and may point mutations at this site may have implications for phage lifestyle ( Schmidt et al., 2014 ; Nasko et al., 2018 ). There are many examples of point mutation(s) in bacterial proteins that prevent antibiotics from binding and, thus, inhibit the function of the antibiotic (e.g., K88R in rpsL ( Ballif et al., 2012 ), C117D in murA ( De_Smet et al., 1999 ), H526T in rpoB ( Sajduda et al., 2004 ), Q124K in EF-Tu ( Zuurmond et al., 1999 ), V246A and V300G in ndh ( Vilcheze et al., 2005 )). Such point mutations within a protein would not be readily apparent from homology search alone. Thus PASV could be used for validating and grouping these peptide sequences according to key point mutations following identification via homology search.","title":"PASV Use Cases"},{"location":"pasv-use-cases/#pasv-use-cases","text":"In the manuscipt , we used PASV for a couple of different test cases.","title":"PASV Use Cases"},{"location":"pasv-use-cases/#eliminating-bycatch-after-sensitive-homology-search","text":"We used PASV to removing likely non-functional ribonucleotide-reductase (RNR) sequences based on acitve sites critical to proper RNR function. Of ~10,000 putative RNR sequences obtained via homology search, PASV (and manual curation) flagged ca. 2/3 of the sequences as bycatch based on key residues and aligments to a set of Class I alpha subunit and Class II RNR sequences. Common gene families within the bycatch sequences included RNR Class I beta subunits, thioredoxins, polymerases, helicases, and terminases. >99% concordance with manual annotation","title":"Eliminating bycatch after sensitive homology search"},{"location":"pasv-use-cases/#partitioning-peptide-sequences-based-on-key-residues","text":"Partitioning RNR Class I alpha and RNR Class II sequences Using key residues to accurately partition RNR Class I alpha sequences from RNR Class II sequences >98% concordance with manual annotation Using amino acid signatures to differentiate Alternative oxidase (AOX) and plastid terminal oxidase (PTOX) Two proteins that are challenging to differentiate by homology search alone 100% concordance with manual annotation","title":"Partitioning peptide sequences based on key residues"},{"location":"pasv-use-cases/#other-potential-use-cases","text":"We didn't validate these in the manuscript, but our lab has used PASV to filter and partition DNA polymerase I (Pol I) peptides based on the residues at position 762 ( E. coli numbering). This position has been linked to changes in either the fidelity or efficiency of replication ( Tabor & Richardson 1995 ), and may point mutations at this site may have implications for phage lifestyle ( Schmidt et al., 2014 ; Nasko et al., 2018 ). There are many examples of point mutation(s) in bacterial proteins that prevent antibiotics from binding and, thus, inhibit the function of the antibiotic (e.g., K88R in rpsL ( Ballif et al., 2012 ), C117D in murA ( De_Smet et al., 1999 ), H526T in rpoB ( Sajduda et al., 2004 ), Q124K in EF-Tu ( Zuurmond et al., 1999 ), V246A and V300G in ndh ( Vilcheze et al., 2005 )). Such point mutations within a protein would not be readily apparent from homology search alone. Thus PASV could be used for validating and grouping these peptide sequences according to key point mutations following identification via homology search.","title":"Other potential use cases"},{"location":"picking-refs-and-residues/","text":"Picking Key References and Residue Positions References For MSA mode The PASV manuscript goes in to a lot of detail about best practices for picking reference sequences for your gene of interest. If you want the details check out the paper :) For example, for ribonucleotide reductase (RNR) sequences, I got a bunch of annotated sequences from the RNRdb, hand validated them, and then tested a BUNCH of ways of picking references sequences from among them. For Clustal Omega, most randomly chosen reference sets worked pretty well, but there were a couple of points to keep in mind when making a reference set for your protein of interest. Mainly it boils down to just a couple of important points: Select between 10 and 20 sequences if possible. Select sequences that align well with each other. Select full length protein sequences (as opposed to partial sequences). For HMM mode This part of the documentation isn't finished yet :) Residues/Positions The manuscript goes into a lot of detail about this as well, so I encourage you check it out :) Here's the TL;DR: Pick residues that are important to protein function. Pick residues that have been biochemically characterized. Pick residues that are invariant (or at least highly conserved). If your lucky, you will find a small set of residues that will satisfy all these conditions! For example, in RNR, there are certain residues key to proper protein function. So if there are point mutations in the key residues, then we have some pretty good evidence that the sequence represents a non-functional RNR (or some other protein entirely). Again, see the manuscript for more info about this.","title":"Picking References and Residues"},{"location":"picking-refs-and-residues/#picking-key-references-and-residue-positions","text":"","title":"Picking Key References and Residue Positions"},{"location":"picking-refs-and-residues/#references","text":"","title":"References"},{"location":"picking-refs-and-residues/#for-msa-mode","text":"The PASV manuscript goes in to a lot of detail about best practices for picking reference sequences for your gene of interest. If you want the details check out the paper :) For example, for ribonucleotide reductase (RNR) sequences, I got a bunch of annotated sequences from the RNRdb, hand validated them, and then tested a BUNCH of ways of picking references sequences from among them. For Clustal Omega, most randomly chosen reference sets worked pretty well, but there were a couple of points to keep in mind when making a reference set for your protein of interest. Mainly it boils down to just a couple of important points: Select between 10 and 20 sequences if possible. Select sequences that align well with each other. Select full length protein sequences (as opposed to partial sequences).","title":"For MSA mode"},{"location":"picking-refs-and-residues/#for-hmm-mode","text":"This part of the documentation isn't finished yet :)","title":"For HMM mode"},{"location":"picking-refs-and-residues/#residuespositions","text":"The manuscript goes into a lot of detail about this as well, so I encourage you check it out :) Here's the TL;DR: Pick residues that are important to protein function. Pick residues that have been biochemically characterized. Pick residues that are invariant (or at least highly conserved). If your lucky, you will find a small set of residues that will satisfy all these conditions! For example, in RNR, there are certain residues key to proper protein function. So if there are point mutations in the key residues, then we have some pretty good evidence that the sequence represents a non-functional RNR (or some other protein entirely). Again, see the manuscript for more info about this.","title":"Residues/Positions"},{"location":"todo/","text":"To do Whoops, you hit a page that isn't finished yet! This documentation is a work in progress. If you feel as though something is missing, feel free to open an issue on the pasv repository.","title":"To do"},{"location":"todo/#to-do","text":"Whoops, you hit a page that isn't finished yet! This documentation is a work in progress. If you feel as though something is missing, feel free to open an issue on the pasv repository.","title":"To do"},{"location":"tons-of-examples/","text":"Tons of Examples If you want to see a ton of examples on how to run (and how to break) pasv , there are many examples in the tests directory of the pasv GitHub repository . With in the test directory, there are three directories, slow , medium , and fast . Each of these contain directories that end in .t . Each of those define a Cram test . Inside of the *.t directories you will find a run.t file as well as other files necessary for the tests to run (e.g., query sequences, reference sequences, etc.). Each run.t file exercises a specific aspect of using the pasv command line app. The nice part about run.t files is that they are written as sort of \"pseudo\" bash scripts. Any thing starting with a $ is run in a sandboxed environment. Everything else are comments describing what is going on. The other cool thing is that each of these examples is tested under continuous integration . This means that any example that works will work with the latest version of pasv and any example that should fail will not work with the latest version of pasv . Because of these two aspects, you can consider the run.t examples a kind of spec on pasv CLI usage.","title":"Tons of Examples"},{"location":"tons-of-examples/#tons-of-examples","text":"If you want to see a ton of examples on how to run (and how to break) pasv , there are many examples in the tests directory of the pasv GitHub repository . With in the test directory, there are three directories, slow , medium , and fast . Each of these contain directories that end in .t . Each of those define a Cram test . Inside of the *.t directories you will find a run.t file as well as other files necessary for the tests to run (e.g., query sequences, reference sequences, etc.). Each run.t file exercises a specific aspect of using the pasv command line app. The nice part about run.t files is that they are written as sort of \"pseudo\" bash scripts. Any thing starting with a $ is run in a sandboxed environment. Everything else are comments describing what is going on. The other cool thing is that each of these examples is tested under continuous integration . This means that any example that works will work with the latest version of pasv and any example that should fail will not work with the latest version of pasv . Because of these two aspects, you can consider the run.t examples a kind of spec on pasv CLI usage.","title":"Tons of Examples"}]}